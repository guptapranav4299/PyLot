const request = require("request");
const path = require("path");
const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const bcrypt = require("bcryptjs");
const User = require("./models/Users");
const { Client } = require("ssh2");
const port = 5555;
const app = express();
const health=require('./controllers/health');
const users=require('./controllers/users')
const display=require('./controllers/display')

app.use(bodyParser.json());
require("dotenv").config({ path: path.join(__dirname, ".env") });

//================================================================================================================================================================================
//================================================================================================================================================================================
//~~DB OPERATIONS~~
//================================================================================================================================================================================
//================================================================================================================================================================================
app.use('/users',users)


//================================================================================================================================================================================
//================================================================================================================================================================================
/*app.post("/users/signin", ({ body: { username, password } }, res) => {
  User.findOne({ username: username }, "username hash")
    .then(async ({ hash }) => {
      const result = await bcrypt.compare(password, hash);
      result
        ? res.send("Authentication Successful")
        : res.send("Authenication Failed");
    })
    .catch((err) => res.send(err));    REMOVE THIS COMMENTED CODE ONCE VERIFIED FRONTEND FUNCTIONALITY.
});*/

//================================================================================================================================================================================
//================================================================================================================================================================================

//================================================================================================================================================================================
//================================================================================================================================================================================

//================================================================================================================================================================================
//================================================================================================================================================================================



//================================================================================================================================================================================
//================================================================================================================================================================================
app.use('/health',health)
//================================================================================================================================================================================
//================================================================================================================================================================================
//~~END OF DB OPERATIONS
//================================================================================================================================================================================
//================================================================================================================================================================================
//================================================================================================================================================================================
//~ SSH OPERATIONS
//================================================================================================================================================================================
async function sshInit(username, password, host, res) {
  const connectionDetails = {
    host: host,
    port: 22,
    username: username,
    password: password,
  };
  const conn = new Client();
  let log = "";
  conn.on("ready", () => {
    log += "\nPyLot connected to user's remote server\n";
    conn.exec(
      "git clone https://github.com/ryzbaka/PyLotHealthReportingServicePayload.git;cd PyLotHealthReportingServicePayload;npm i;npx forever start healthMonitor.js",
      (err, stream) => {
        if (err) {
          log += "\nCommand execution failed\n";
        }
        stream.stdout.on("data", (data) => {
          log += `\n***\n STDOUT : \n${data.toString()}\n***`;
        });
        stream.stderr.on("data", (data) => {
          log += `\n***\n STDERR : \n${data.toString()}\n***`;
        });
        stream.on("close", () => {
          log += "\nConnection closed from server\n";
          conn.end();
        });
      }
    );
  });
  conn.on("end", () => {
    log += "\nDisconnected to server.\n";
    res.send(`\nLog:\n${log}`);
  });
  conn.on("error", () => {
    log += "\nConnection error.\n";
  });
  conn.connect(connectionDetails);
}
//================================================================================================================================================================================
//~Connecting to Health Server Application
//================================================================================================================================================================================
app.use('/display',display)

//================================================================================================================================================================================
//================================================================================================================================================================================
//================================================================================================================================================================================
//~CONNECTIING TO MONGODB SERVER
//================================================================================================================================================================================
mongoose
  .connect(
    process.env.DB_CONNECTION, //environment variable
    { useNewUrlParser: true, useUnifiedTopology: true }
  )
  .then(() => console.log("Connected to MongoDB cluster..."))
  .catch((err) => console.error(err));
//================================================================================================================================================================================
//~ STARTTING NODE JS SERVER AND SETTING TO LISTEN ON PORT
//================================================================================================================================================================================
const server = app.listen(port, () => {
  console.log(`listening on port ... ${port}`);
});
//================================================================================================================================================================================
//================================================================================================================================================================================
